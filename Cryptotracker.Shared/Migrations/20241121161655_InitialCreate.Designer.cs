// <auto-generated />
using System;
using Cryptotracker.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cryptotracker.Shared.Migrations
{
    [DbContext(typeof(CryptoDbContext))]
    [Migration("20241121161655_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cryptotracker.Shared.Models.Cryptocurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChangePercent24Hr")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<decimal>("CurrentPriceUsd")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MarketCapUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(40,2)");

                    b.Property<decimal>("MaxSupply")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<decimal>("Supply")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("VWAP24Hr")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<decimal>("VolumeUsd")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(40,2)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("Cryptocurrencies");
                });

            modelBuilder.Entity("Cryptotracker.Shared.Models.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CryptocurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceUsd")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(40,8)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CryptocurrencyId");

                    b.HasIndex("Timestamp");

                    b.ToTable("PriceHistory");
                });

            modelBuilder.Entity("Cryptotracker.Shared.Models.PriceHistory", b =>
                {
                    b.HasOne("Cryptotracker.Shared.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany("PriceHistory")
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");
                });

            modelBuilder.Entity("Cryptotracker.Shared.Models.Cryptocurrency", b =>
                {
                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
